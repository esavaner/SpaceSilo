// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator prismaClassGenerator {
  provider = "prisma-class-generator"
  separateRelationFields = true
  dryRun = false
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  owner
  admin
  user
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  role      Role     @default(user)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  settings  Json?

  photos    Photo[]
  albums    Album[]
  ownerOf   Group[]
  memberOf  GroupMember[]
}


model Photo {
  id        String   @id @default(cuid())
  url       String
  path      String
  thumbnailPath String
  hash      String
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ownerId   String
  owner     User     @relation(fields: [ownerId], references: [id])
  albums    Album[]
  group     Group[]
}

model Album {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ownerId   String
  owner     User     @relation(fields: [ownerId], references: [id])
  parentId  String?
  parent    Album?   @relation("Subalbums", fields: [parentId], references: [id])
  subalbums Album[]  @relation("Subalbums")
  photos    Photo[]
  group     Group[]
}


model Group {
  id        String   @id
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ownerId   String
  owner     User     @relation(fields: [ownerId], references: [id])
  personal  Boolean?  @default(false)
  members   GroupMember[]
  albums    Album[]
  photos    Photo[]
}

enum AccessLevel {
  admin
  edit
  read
}

model GroupMember {
  groupId   String
  group     Group    @relation(fields: [groupId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  access    AccessLevel @default(read)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@id([groupId, userId])
}